{"version":3,"sources":["webpack:///sw-notification.bundle.js","webpack:///webpack/bootstrap 67897db8bd691532f924?087c","webpack:///./src/serviceworker-notification.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","console","log","self","addEventListener","event","skipWaiting","fetch","method","then","response","ok","json","title","uptimeSec","Math","round","uptime","waitUntil","registration","showNotification","body","icon","tag","error","message"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,GAEtB,YE9CDQ,SAAQC,IAAI,UAAWC,MAEvBA,KAAKC,iBAAiB,UAAW,SAAUC,GACvCF,KAAKG,cACLL,QAAQC,IAAI,YAAaG,KAG7BF,KAAKC,iBAAiB,WAAY,SAAUC,GACxCJ,QAAQC,IAAI,YAAaG,KAG7BF,KAAKC,iBAAiB,OAAQ,SAAUC,GACpCJ,QAAQC,IAAI,wBAAyBG,GAQrCE,MAAM,aACFC,OAAQ,QAGPC,KAAK,SAASC,GACX,MAAGA,GAASC,GACDD,EAASE,WAEhBX,SAAQC,IAAI,+BAAgCQ,KAGnDD,KAAK,SAASG,GACX,GAAMC,GAAQ,eACRC,EAAYC,KAAKC,MAAMJ,EAAKK,OAAS,IAG3CZ,GAAMa,UACFf,KAAKgB,aAAaC,iBAAiBP,GAC/BQ,sBAAuBP,EAAvB,2BACAQ,KAAM,uBACNC,IAAK,cApBrBhB,SAuBW,SAASiB,GACZvB,QAAQC,IAAI,uDAAyDsB,EAAMC","file":"sw-notification.bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tconsole.log('Started', self);\n\t\n\tself.addEventListener('install', function (event) {\n\t    self.skipWaiting();\n\t    console.log('Installed', event);\n\t});\n\t\n\tself.addEventListener('activate', function (event) {\n\t    console.log('Activated', event);\n\t});\n\t\n\tself.addEventListener('push', function (event) {\n\t    console.log('Push message received', event);\n\t    /*\r\n\t     Changing this message by reading event.data.json() is apparently not very straightforward, see https://developers.google.com/web/updates/2016/03/web-push-encryption\r\n\t     The older style would be to do a server call to retrieve the required information.\r\n\t     //https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API\r\n\t     */\n\t\n\t    // XMLHttpRequest not available in Service Worker, use Fetch API\n\t    fetch('getuptime', {\n\t        method: 'GET' /*,\r\n\t                      body: 'form'*/\n\t    }).then(function (response) {\n\t        if (response.ok) {\n\t            return response.json();\n\t        } else {\n\t            console.log('Network response was not ok.', response);\n\t        }\n\t    }).then(function (json) {\n\t        var title = 'Push message';\n\t        var uptimeSec = Math.round(json.uptime / 1000);\n\t        //console.log('found uptime:', uptimeSec);\n\t\n\t        event.waitUntil(self.registration.showNotification(title, {\n\t            body: 'The uptime is ' + uptimeSec + 's (see serviceworker.js)',\n\t            icon: 'launcher-icon-4x.png',\n\t            tag: 'my-tag'\n\t        }));\n\t    }).catch(function (error) {\n\t        console.log('There has been a problem with your fetch operation: ' + error.message);\n\t    });\n\t});\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** sw-notification.bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 67897db8bd691532f924\n **/","console.log('Started', self);\r\n\r\nself.addEventListener('install', function (event) {\r\n    self.skipWaiting();\r\n    console.log('Installed', event);\r\n});\r\n\r\nself.addEventListener('activate', function (event) {\r\n    console.log('Activated', event);\r\n});\r\n\r\nself.addEventListener('push', function (event) {\r\n    console.log('Push message received', event);\r\n    /*\r\n     Changing this message by reading event.data.json() is apparently not very straightforward, see https://developers.google.com/web/updates/2016/03/web-push-encryption\r\n     The older style would be to do a server call to retrieve the required information.\r\n     //https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API\r\n     */\r\n\r\n    // XMLHttpRequest not available in Service Worker, use Fetch API\r\n    fetch('getuptime', {\r\n        method: 'GET'/*,\r\n         body: 'form'*/\r\n    })\r\n        .then(function(response) {\r\n            if(response.ok) {\r\n                return response.json();\r\n            } else {\r\n                console.log('Network response was not ok.', response);\r\n            }\r\n        })\r\n        .then(function(json) {\r\n            const title = 'Push message';\r\n            const uptimeSec = Math.round(json.uptime / 1000);\r\n            //console.log('found uptime:', uptimeSec);\r\n\r\n            event.waitUntil(\r\n                self.registration.showNotification(title, {\r\n                    body: `The uptime is ${uptimeSec}s (see serviceworker.js)`,\r\n                    icon: 'launcher-icon-4x.png',\r\n                    tag: 'my-tag'\r\n                }));\r\n        })\r\n        .catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ' + error.message);\r\n        });\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/serviceworker-notification.js\n **/"],"sourceRoot":""}